let chatHistory = [];
let dynamicUsers = {};

function logChat(message) {
  chatHistory.push(message);
  const log = document.getElementById("chatlog");
  log.innerHTML += `<div>${message}</div>`;
  log.scrollTop = log.scrollHeight;
}

function handleChat(e) {
  if (e.key !== "Enter") return;
  const input = document.getElementById("chatinput").value.trim();
  if (!input) {
    showSuggestions();
    return;
  }
  document.getElementById("suggestions")?.remove();
  logChat("üë§ " + input);
  processChat(input);
  document.getElementById("chatinput").value = "";
}

// üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ /users
async function loadUsers() {
  try {
    const res = await fetch("/users");
    const data = await res.json();
    const select = document.getElementById("userselect");
    const datalist = document.getElementById("userlist");

    for (let uid in data) {
      const name = data[uid];
      const norm = name.toLowerCase();
      const reversed = norm.split(" ").reverse().join(" ");
      dynamicUsers[norm] = parseInt(uid);
      dynamicUsers[reversed] = parseInt(uid);

      const opt = document.createElement("option");
      opt.value = uid;
      opt.textContent = name;
      select.appendChild(opt);

      const dl = document.createElement("option");
      dl.value = name;
      datalist.appendChild(dl);
    }
  } catch {
    logChat("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");
  }
}

// üîç –†–∞—Å–ø–æ–∑–Ω–∞–µ–º UID –ø–æ —Ç–µ–∫—Å—Ç—É
function detectUserId(message) {
  const msg = message.toLowerCase();
  for (let name in dynamicUsers) {
    if (msg.includes(name)) {
      logChat(`üïµÔ∏è‚Äç‚ôÄÔ∏è –ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ${name}`);
      return dynamicUsers[name];
    }
  }
  return "";
}

async function processChat(message) {
  let label = "–ù–î–ó", range = "week";
  const stages = ["–ù–î–ó", "–ù–î–ó 2", "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É"];
  for (let s of stages) {
    if (message.toLowerCase().includes(s.toLowerCase())) label = s;
  }

  if (message.includes("—Å–µ–≥–æ–¥–Ω—è")) range = "today";
  if (message.includes("–Ω–µ–¥–µ–ª—è")) range = "week";
  if (message.includes("–º–µ—Å—è—Ü")) range = "month";

  const uidText = detectUserId(message);
  const selectedUid = document.getElementById("userselect").value;
  const uid = selectedUid || uidText;

  const res = await fetch(`/stats_data?label=${label}&range=${range}&uid=${uid}`);
  const data = await res.json();

  if (!data.values || !data.values.length || data.total === 0) {
    logChat(`üì≠ –ù–µ—Ç –ª–∏–¥–æ–≤ –ø–æ "${label}" (${range})${uid ? " –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" : ""}.`);
    document.getElementById("report").innerHTML = `<p>üì≠ –ü—É—Å—Ç–æ: –Ω–µ—Ç –ª–∏–¥–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É.</p>`;
    document.getElementById("chart").innerHTML = "";
    return;
  }

  logChat(`ü§ñ ${label}, ${range}${uid ? " (—Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É)" : ""}: –≤—Å–µ–≥–æ ${data.total} –ª–∏–¥–æ–≤`);
  renderTable(data);
  renderChart(data);

  const max = Math.max(...data.values);
  const idx = data.values.indexOf(max);
  const top = data.labels[idx];
  logChat(`üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: ${top} (${max} –ª–∏–¥–æ–≤)`);
}

function presetChat(text) {
  document.getElementById("chatinput").value = text;
  handleChat({ key: "Enter" });
}

function showSuggestions() {
  const box = document.getElementById("chatbox");
  if (document.getElementById("suggestions")) return;
  const sug = document.createElement("div");
  sug.id = "suggestions";
  sug.innerHTML = `
    <strong>üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</strong>
    <ul>
      <li>–ù–î–ó –Ω–µ–¥–µ–ª—è –ø–æ –ê–ª–∏—è –ê—Ö–º–∞—Ç—à–∏–Ω–∞</li>
      <li>–°—Ä–∞–≤–Ω–∏ –ù–î–ó –∏ –ù–î–ó 2 –∑–∞ –Ω–µ–¥–µ–ª—é</li>
      <li>–ù–î–ó –ø–æ —á–∞—Å–∞–º —Å–µ–≥–æ–¥–Ω—è</li>
      <li>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ù–î–ó –ø–æ –¥–Ω—è–º</li>
      <li>–ù–î–ó –ø–æ –Ω–µ–¥–µ–ª—è–º</li>
      <li>–°–∫–∞—á–∞–π –æ—Ç—á—ë—Ç –ø–æ –ù–î–ó</li>
    </ul>`;
  box.appendChild(sug);
}

function renderTable(data) {
  let html = `<h3>üìã –°—Ç–∞–¥–∏—è: "${data.stage}", –ø–µ—Ä–∏–æ–¥: "${data.range}"</h3>`;
  html += `<p>–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${data.total}</p><table><tr><th>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th><th>–õ–∏–¥–æ–≤</th></tr>`;
  for (let i = 0; i < data.labels.length; i++) {
    html += `<tr><td>${data.labels[i]}</td><td>${data.values[i]}</td></tr>`;
  }
  html += `</table>`;
  document.getElementById("report").innerHTML = html;
}

function renderChart(data) {
  const trace = {
    x: data.labels,
    y: data.values,
    type: "bar",
    marker: { color: "#007bff" }
  };
  const layout = {
    title: `üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî "${data.stage}" (${data.range})`,
    margin: { t: 40, l: 60, r: 30, b: 100 }
  };
  Plotly.newPlot("chart", [trace], layout);
}

// üöÄ –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
loadUsers();


