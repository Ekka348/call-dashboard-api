let chatHistory = [];

function logChat(message) {
  chatHistory.push(message);
  const log = document.getElementById("chatlog");
  log.innerHTML += `<div>${message}</div>`;
  log.scrollTop = log.scrollHeight;
}

function handleChat(e) {
  if (e.key !== "Enter") return;
  const input = document.getElementById("chatinput").value.trim();
  if (!input) {
    showSuggestions();
    return;
  }
  document.getElementById("suggestions")?.remove();
  logChat("üë§ " + input);
  processChat(input);
  document.getElementById("chatinput").value = "";
}

async function processChat(message) {
  let label = "–ù–î–ó", range = "week", uid = "";
  const stages = ["–ù–î–ó", "–ù–î–ó 2", "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É"];
  const users = { "–∞–ª–∏—è": 1, "–Ω–∞—Ç–∞–ª—å—è": 2, "—Å–µ—Ä–≥–µ–π": 3 };

  for (let s of stages) {
    if (message.toLowerCase().includes(s.toLowerCase())) label = s;
  }

  if (message.includes("—Å–µ–≥–æ–¥–Ω—è")) range = "today";
  if (message.includes("–Ω–µ–¥–µ–ª—è")) range = "week";
  if (message.includes("–º–µ—Å—è—Ü")) range = "month";

  for (let name in users) {
    if (message.toLowerCase().includes(name)) uid = users[name];
  }

  // ‚è± –ü–æ —á–∞—Å–∞–º
  if (message.includes("–ø–æ —á–∞—Å–∞–º")) {
    const res = await fetch(`/hourly?label=${label}&range=${range}`);
    const data = await res.json();
    renderLineChart(data);
    logChat(`üïí –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º: ${label}, ${range}`);
    return;
  }

  // üìà –ü–æ –¥–Ω—è–º
  if (message.includes("–ø–æ –¥–Ω—è–º") || message.includes("—Ç—Ä–µ–Ω–¥")) {
    const res = await fetch(`/trend?label=${label}&range=${range}`);
    const data = await res.json();
    renderLineChart(data);
    logChat(`üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º: ${label}, ${range}`);
    return;
  }

  // üîÅ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å—Ç–∞–¥–∏–π
  if (message.includes("—Å—Ä–∞–≤–Ω–∏")) {
    const found = stages.filter(s => message.includes(s));
    if (found.length === 2) {
      const res = await fetch(`/compare_stages?stage1=${found[0]}&stage2=${found[1]}&range=${range}`);
      const data = await res.json();
      const diff = data.count1 - data.count2;
      const emoji = diff > 0 ? "üìà" : diff < 0 ? "üìâ" : "‚ûñ";
      logChat(`üîÅ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: ${data.stage1} (${data.count1}) vs ${data.stage2} (${data.count2}) ‚Üí —Ä–∞–∑–Ω–∏—Ü–∞: ${diff} ${emoji}`);
      return;
    }
  }

  // üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
  if (message.includes("—Å–∫–∞—á–∞–π") || message.includes("—ç–∫—Å–ø–æ—Ä—Ç")) {
    const link = `/export_csv?label=${label}&range=${range}`;
    logChat(`üìÅ –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç: <a href="${link}" target="_blank">${label} ${range}</a>`);
    return;
  }

  // üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
  if (message.includes("–Ω–µ–¥–µ–ª—è–º") || message.includes("–ø–æ –Ω–µ–¥–µ–ª—è–º")) {
    const res = await fetch(`/weekly_breakdown?label=${label}`);
    const data = await res.json();
    let html = `<table border="1" cellpadding="6"><tr><th>–ù–µ–¥–µ–ª—è</th><th>–õ–∏–¥–æ–≤</th></tr>`;
    for (let w of data) {
      html += `<tr><td>${w.week}</td><td>${w.count}</td></tr>`;
    }
    html += `</table>`;
    logChat(`üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ "${label}":`);
    document.getElementById("chart").innerHTML = html;
    return;
  }

  // üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—á—ë—Ç
  const res = await fetch(`/stats_data?label=${label}&range=${range}&uid=${uid}`);
  const data = await res.json();
  logChat(`ü§ñ ${label}, ${range}: –≤—Å–µ–≥–æ ${data.total} –ª–∏–¥–æ–≤`);
  renderTable(data);
  renderChart(data);
  const max = Math.max(...data.values);
  const idx = data.values.indexOf(max);
  const top = data.labels[idx];
  logChat(`üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: ${top} (${max} –ª–∏–¥–æ–≤)`);
}

function presetChat(text) {
  document.getElementById("chatinput").value = text;
  handleChat({ key: "Enter" });
}

function showSuggestions() {
  const box = document.getElementById("chatbox");
  const sug = document.createElement("div");
  sug.id = "suggestions";
  sug.innerHTML = `
    <strong>üí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</strong>
    <ul>
      <li>–ù–î–ó –Ω–µ–¥–µ–ª—è –ø–æ –ê–ª–∏–µ</li>
      <li>–°—Ä–∞–≤–Ω–∏ –ù–î–ó –∏ –ù–î–ó 2 –∑–∞ –Ω–µ–¥–µ–ª—é</li>
      <li>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ù–î–ó –ø–æ –¥–Ω—è–º</li>
      <li>–ù–î–ó –ø–æ —á–∞—Å–∞–º —Å–µ–≥–æ–¥–Ω—è</li>
      <li>–ù–î–ó –ø–æ –Ω–µ–¥–µ–ª—è–º</li>
      <li>–°–∫–∞—á–∞–π –æ—Ç—á—ë—Ç –ø–æ –ù–î–ó</li>
    </ul>`;
  box.appendChild(sug);
}

// üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∞—Ä-–≥—Ä–∞—Ñ–∏–∫
function renderChart(data) {
  const trace = {
    x: data.labels,
    y: data.values,
    type: "bar",
    marker: { color: "#007bff" }
  };
  const layout = {
    title: `üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî "${data.stage}" (${data.range})`,
    margin: { t: 40, l: 60, r: 30, b: 100 }
  };
  Plotly.newPlot("chart", [trace], layout);
}

// üìà –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º/—á–∞—Å–∞–º
function renderLineChart(data) {
  const trace = {
    x: data.labels,
    y: data.values,
    type: "scatter",
    mode: "lines+markers",
    marker: { color: "#28a745" }
  };
  const layout = {
    title: `üìà –¢—Ä–µ–Ω–¥ ‚Äî "${data.stage}" (${data.range})`,
    margin: { t: 40, l: 60, r: 30, b: 100 }
  };
  Plotly.newPlot("chart", [trace], layout);
}

// üìã –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
function renderTable(data) {
  let html = `<h3>üìã –°—Ç–∞–¥–∏—è: "${data.stage}", –ø–µ—Ä–∏–æ–¥: "${data.range}"</h3>`;
  html += `<p>–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${data.total}</p><table><tr><th>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th><th>–õ–∏–¥–æ–≤</th></tr>`;
  for (let i = 0; i < data.labels.length; i++) {
    html += `<tr><td>${data.labels[i]}</td><td>${data.values[i]}</td></tr>`;
  }
  html += `</table>`;
  document.getElementById("report").innerHTML = html;
}
