const STAGES = {
  "–ù–î–ó": "5",
  "–ù–î–ó 2": "9",
  "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å": "IN_PROCESS",
  "–ü—Ä–∏–≥–ª–∞—à–µ–Ω –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É": "CONVERTED",
  "NEW": "NEW",
  "OLD": "11",
  "–ë–∞–∑–∞ –í–í": "UC_VTOOIM"
};

const WORK_STAGES = ["–ù–î–ó", "–ù–î–ó 2", "–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω –∫ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É"];
const INFO_STAGES = ["NEW", "OLD", "–ë–∞–∑–∞ –í–í"];

async function updateDashboard() {
  try {
    const res = await fetch("/api/leads/by-stage?_=" + Date.now()); // ‚ö† –∞–Ω—Ç–∏-–∫—ç—à
    const data = await res.json();

    // üîπ –ò–Ω—Ñ–æ-—Å—Ç–∞–¥–∏–∏
    const statsContainer = document.getElementById("stats");
    statsContainer.innerHTML = "";
    INFO_STAGES.forEach(stage => {
      const info = data.data[stage];
      const value = info?.count ?? 0;
      const statLine = document.createElement("p");
      statLine.innerHTML = `<strong>${stage}:</strong> ${value}`;
      statsContainer.appendChild(statLine);
    });

    // üîπ –†–∞–±–æ—á–∏–µ —Å—Ç–∞–¥–∏–∏
    const content = document.getElementById("content");
    content.innerHTML = "";
    WORK_STAGES.forEach(stage => {
      const info = data.data[stage];
      const block = document.createElement("div");
      block.className = "stage-table";

      const heading = document.createElement("h2");
      heading.textContent = `–°—Ç–∞–¥–∏—è: ${stage}`;
      block.appendChild(heading);

      if (!info?.details || info.details.length === 0) {
        const empty = document.createElement("p");
        empty.className = "empty-message";
        empty.textContent = "–ù–µ—Ç –ª–∏–¥–æ–≤.";
        block.appendChild(empty);
      } else {
        const table = document.createElement("table");
        const header = document.createElement("thead");
        header.innerHTML = `<tr><th>–û–ø–µ—Ä–∞—Ç–æ—Ä</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>`;
        table.appendChild(header);

        const body = document.createElement("tbody");
        info.details.forEach(row => {
          const tr = document.createElement("tr");
          tr.innerHTML = `<td>${row.operator}</td><td>${row.count}</td>`;
          body.appendChild(tr);
        });

        table.appendChild(body);
        block.appendChild(table);
      }

      content.appendChild(block);
    });

    // üî∏ –õ–æ–≥ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date().toLocaleTimeString();
    document.getElementById("last-update").textContent = now;
  } catch (err) {
    document.getElementById("last-update").textContent = "‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
    console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
  }
}

// ‚è± –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
window.onload = () => {
  updateDashboard();
  setInterval(updateDashboard, 30000);
};
